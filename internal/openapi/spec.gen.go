// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYXWvcRhf+K2LeF3IjR1ollFSXSZsQCm0IIRBcY8bS2V2lkkYejRwvy0K02wbapBd1",
	"oSUtDTUEJ62LL9KmYLslP2a6tfsvykgjrWRpv/wV6EVMVpqZ85znOV+jLrKIFxAffBYis4tCqw0eTv5r",
	"YQYtQjvLHcB0OYw8D9OOeAHr2AtcCJG5WFjl2MjU1dFvH3uATBQy6vgtpCKLRD5LlgTUsQCZi5d0XZ3j",
	"35KKGGHYRabeWxKnkAAoc6AMVsDoItYJhHHHZ9ACinoVXPkSia+XA6zbLBF3kcPAS+zZ0MSRm/pT4EPC",
	"rBzg4fWb6daGoSLP8Qu/5GpMKe6ItdLJKo6eiiisRg4FG5mLJZeP+pd5k0HPThXgHOaKY+vlzeGQlftg",
	"sZQXv+lQb9nxm0TAOkK8fGtjBsxJqW0S6mGGTCQeLiRP1SrfIcMsCguOrhDiAvbFu06n0/G8Gpl6BQeK",
	"uGpwU7AItY8E7FkEzvyuNynxao8aB8IDj9RuyCOzuid9UsdgMYrKwVMbSrl/Erg8ehRbCbpCaEnmazVZ",
	"Xa7V5YgQDUMv8ooM3bikN/RGBsFEthNKIyk3KMdjGg09N42OUSqKehYgIkPX39EbuiFcDTBjQH1kokV9",
	"4d2luUQ+OzHLOqbHlXTJ2a9oI47KMjxb7+EHAgJdwIGDVLQGNHSI8LlxURegSAC+eGWiSxfFo4SWdkKy",
	"Jv60gKW1MrSoE7B0bxuwy9qK1Qbrk4997D7AnVChwCLqKxduMsUJFdYGhRLClAC34AJKDFEs9t+0kYlu",
	"gChsFMKA+GGiqagmQAW+JJQi6gpDjAWmprnEwm6bhMy8ol/Rk3jIe1kJTMKmtmZoowCVDlTM3zVuZzQG",
	"mGIPWGa67KtwxI+8FaAKaSrpuSESRCMTrUaQFFzZKP1IZFbaf0sdxtCrHUV4IYSHkF0ldkcWYgZJA0uj",
	"YsSOCNzyCoSDwHWsxCftfiiwdgum8y73fwpNZKL/aaMhQZMTQsZS72gDE9bLLHz0QULt7AqJVCBhTezw",
	"wS+8/ysf/MEHn/P+RoPHzw/f/Dn84kceP+X9x5VIuUXColZjGZvCx2Qa8pzq9WqYb5yiJWlFLR2y7rnH",
	"OKMi0jUKmIE9p1LFXLKSE5QCzFEyaU1n3SM+aycDRK22713l8fbB0/1/nrzi8bc83uLxp7z/ePj93nDn",
	"u8NX+3zwKBH+Gz7Y5vHO8NFnw51d3t/gD+NUYIXH2zNHw/UMTyWD63JTjiPF9KzPyBNIf8pJl+upIkO/",
	"XKX7Q6Jck9BOLHkm7hjt5XqtKybN3tjGIN4qw93fhntbPN7h/dd88IwPfhai9zcON18ePN8bI2yhIt8D",
	"TMdoKnpTQdJ04ah7MhrBnAKfQVWtn8pnLLIqulwvNVOuk8g/SXK3gCmJQDmkssbdNEUmqJu8V4Sy5SIu",
	"NI13ebxVlJg/7PPBV7y/K/4OfuKDzSQM3vD4xd8/bP61/zvvbxy8fiZWxl/z+CWPn/D4BY+/TPdOjJAs",
	"l2fI+/I8NSE21PoYy0xNjbJ8nlt6q61bRV7kMifAlGniJrNgY4ZPo7ucQ3QWK1A4Ljw1eWmcZbhLA+Wa",
	"3DBTTTmm3mc1x00sNMXb8/koJsa6qIbzWxG7a9zBKy68dcqnEFq+SI7/gNGruV6do5hTBsSam9/Zaz8m",
	"HylY0vvZ0vF2un7KvcvD67ISyOvXjHeu/2pdP+96fI9EVLnx/h0FfDsgjpwxtfwDwgS15ZLTytGVyHHt",
	"2o8tFNacDE3lZQFpzQfIKal9qrTNl2X/BgAA///Mp4IzzxcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
