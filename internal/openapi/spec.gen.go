// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYXWvcRhf+K2LeF3IjR1ollFSXcZtgCm0IIRBcY8bS2V2lkkYejRwvy0K02wbapBd1",
	"oSUtDTUEJ62LL9KmYLslP2a6tfsvykgjrWRpP/wZ6EVMVpqZ85znOV+jLrKIFxAffBYis4tCqw0eTv5r",
	"YQYtQjvLHcB0OYw8D9OOeAHr2AtcCJG5WFjl2MjU1dFvH3uATBQy6vgtpCKLRD5LlgTUsQCZi1d0XT3G",
	"vyUVMcKwi0y9tyROIQFQ5kAZrIDRRawTCOOOz6AFFPUquPIlEl8vB1i3WSLuIoeBl9izoYkjN/WnwIeE",
	"WTnAw+sL6daGoSLP8Qu/5GpMKe6ItdLJKo6eiiisRg4FG5mLJZeP+pd5k0HPThXgHOaKY+vlzeGQlftg",
	"sZQXv+lQb9nxm0TAOkK8fGtjBsxJqW0S6mGGTCQeziVP1SrfIcMsCguOrhDiAvbFu06n0/G8Gpl6BQeK",
	"uGpwU7AItY8E7HkEzvFdb1Li1R41DoQHHqndkEdmdU/6pI7BYhSVg6c2lHL/JHB59Ci2EnSF0JLM12qy",
	"ulyryxEhGoZe5BUZunFFb+iNDIKJbCeURlJuUI7HNBp6bhqdoFQU9SxARIauv6M3dEO4GmDGgPrIRIv6",
	"3LtLxxL5/MQs65geV9IlZ7+ijTgqy/BsvYcfCAh0DgcOUtEa0NAhwufGZV2AIgH44pWJrlwWjxJa2gnJ",
	"mvjTApbWytCiTsDSvW3ALmsrVhusTz72sfsAd0KFAouor1xaYIoTKqwNCiWEKQFuwSWUGKJY7F+wkYlu",
	"gihsFMKA+GGiqagmQAW+JJQi6gpDjAWmprnEwm6bhMy8pl/Tk3jIe1kJTMKmtmZoowCVDlTM3zVuZzQG",
	"mGIPWGa67KtwxI+8FaAKaSrpuSESRCMTrUaQFFzZKP1IZFbaf0sdxtCrHUV4IYSHkF0ndkcWYgZJA0uj",
	"YsSOCNzyCoSDwHWsxCftfiiwdgum8y73fwpNZKL/aaMhQZMTQsZS72gDE9bLLHz0QULtyRRqAcuJEylC",
	"wpqY4oNfeP9XPviDDz7n/Y0Gj58fvvlz+MWPPH7K+48rEXSLhEUNxzI5hafJ9OS51uvVKNI4Q0vSilo6",
	"ZN1zT3BGRbx5CpiBfQoFreQEpQBzlGRa01n3iM/ayWBRq+1713m8ffB0/58nr3j8LY+3ePwp7z8efr83",
	"3Pnu8NU+HzxKhP+GD7Z5vDN89NlwZ5f3N/jDOBVY4fH2zNFwI8NTyey6nJVjSjFt6zP1FNKfcTLmeqrI",
	"0K9W6f6QKPMS2qklz8Qdo71cr3XFBNob2zDEW2W4+9twb4vHO7z/mg+e8cHPQvT+xuHmy4Pne2OELVTq",
	"e4DpGE1FzypImi4cdVVGIzimwOdQbeun9RmLr4qu1kvNlBsk8u1TludEoBxSWeNumiIT1E3eK0LZchEX",
	"msa7PN4qSswf9vngK97fFX8HP/HBZhIGb3j84u8fNv/a/533Nw5ePxMr4695/JLHT3j8gsdfpnsnRkiW",
	"yzPkfXnOmhAban2MZaamRlk+5y291ZauIi9ymRNgyjRxw5mzMcNn0V0uIDqLFSgcF56avEzOMvSlgTIv",
	"N8xUU06o93nNdxMLTfFWfTGKibEuquH8VsTuGnfwigtvnfIphJYvmOM/bPRqrl0XKOaUAbHmRnj+2o/J",
	"RwqW9H62dLydrp9yH/PwuqwE8lo2413sv1rXL7oe3yMRVW6+f0cB3w6II2dMLf+wMEFtueSscnQlcly7",
	"9iMMhTUnQ1N5WUBa82FySmqfqo1llnvHzK9/AwAA//9Gc0hG4RcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
