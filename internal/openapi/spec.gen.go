// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
