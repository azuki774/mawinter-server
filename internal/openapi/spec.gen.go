// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
