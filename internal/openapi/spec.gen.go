// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
