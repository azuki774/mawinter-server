// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXS4vcxhb+K6LuBW9q3FWlbnW3lvdiG3PxTQgmMJkMplo6amlGKqlLpX7M0GDPLBKS",
	"RcABh2RhEsjCZGFCSAJ5+sd0Btv/IlRJ/XJrJj2TCf1Ajzqv73zn1Klj5KVJlgoQKkfuMcq9EBJuLj2u",
	"oJ/KyYMJcPkgL5KEy4l+kck0A6kiWF8W+fpWTTJALoqEgj5INMXLBYInsLIkVzISfb0ik5Fn3kQKEqPU",
	"h4AXsUIuwQjGPMliQK5NCJ4LiyLpleoTPr5bilGGURKJlbtqMZeST/RalSoe13mp30VKGzkn7IWutHcA",
	"nkIYjXdylWZx1A+Vcd1HLrK9LMzGwZAfTXoto1WCl0oDTBVGjty9N0BjbbKBEvrj569fP/zi1Xe/oAU+",
	"e4w0m5g6xMaU2i3cYk3cbjPM2gxTx7bNBSk/+4tgO6zVmu7jS2WtProgaQ08J287EzYQJrq/SG29mvHA",
	"p33HDrxux+kaNT5XoKJSQ5DKhCvkmoc75ineSm0etIkvHb/wm35m1AYyTbZ1yglYNLadg6Mit4+M9Hl0",
	"TiBJt9WaJc1ms30kSHAE1GhdUH0rxPu0B1ky7AgViKhkqRHbzjqRQzFJOn0nP5BDNF0leUXL7VjdHI0O",
	"R+12cNgqDlXF6sGDbZhNGVnNLmKE2YQSiubJQX6UV56UuKIl3Rldlju6HgY7o0Mv7fm+LJgqNqi3aDSI",
	"EeIQSph2hisFUiAX7ZGd7v6WZAyTnAif+4O4x7xLk7Efjrq9MOwXQk0OjPRlSHc06jUp9YYQOT1xBdL5",
	"nYQ7Xaayg85h89Kk4yCGQziQYIf2oCSdhEERSfCRu7eWtblj+6u8XBBrO24GvEV6uTOKoy7oqjeVK4IS",
	"rEppwkc6YrnDswhhNASZR6nOKL1JdEWnGQj9ykX2Tf3IJD00JGvovz6ock/KPRllqpQNgccqtLwQvMP3",
	"BY9HfJJbElQhhXXjrrKi3FIhWDJNlZXxPtxAxpDkWv6udv0O6KAk5FkqcsPpKUaLbXbNgMlCowTGuJSl",
	"eY1PZ89/fPXsw5ffvpidfjA7/XV28mJ28vjVi9/OPvpy9ujz2cnHs4cnG268nebqnTnkOlWQq/+kvtnp",
	"vVQoEMYSz7I48oxY4yDX5lYL/xjdKq8tqm+GPC5go0hrugG9YjfQeJSjygovK6JMK9ItcdX1vInWW//T",
	"yWeEXn+kTVKzo3tc6VA1AFXwO0R/7xPimu97dUCUwNk1iFBmN8+F5N8SAuSifzWW412jmu0qHpUS65D8",
	"VwJX4Bu6LZmoyWYJGFncWtTmeMeUlNATRsDjHFYZqienxrH+n55bP7d3ywXW7NFz6+yn718/+XR28sPs",
	"9Ons9JvZyeOzT56c/f7Z+ay9AxVpd4FL/UP1Kf+bed0Y1WhNYl8+e/76q6crc1oTt7CD27iDu5gSTCmm",
	"DFPMsL0cyxi1u5RN8YYBek0GmoyS6f46Kxbz9UX0qB+Ap29O05vs0QW1Rpw+KEsrqWiTm1mfS56AAlmO",
	"C5EW1O0WYVRFO5lnc75rKFlATbnPzw/TfU09xXsxrJDu+uzMjxpmBFn03UyCZ2qlEttsqve1RzXUXIPI",
	"MxVnqmt3d3f33j3LBFI2/CFrLKesuelNQ++yK/bvbdvFYk+uba30Gi1VVvCaknESX0HHBc1tHdzNTrXR",
	"auYI35Zpon//5+ZY8gbH1s3lwKUXWrqhW6Jcb0g4KMCcJysWmoZ/Ibuv1NguWfNz1K5Q5LtpIa07t+5b",
	"IPwsjYS63ipfHtH3q6z9c5W+YgtfWG/nlfa8Gs4nnoYO5HDubCFjPeoplbmNRpx6PA7TXLkd0iHmyFM3",
	"8kZ8Mo5CmzE2bumj6p8BAAD//0GBhFzDEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
