// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX2/Uxhf9Ktb8fhIvDvYaVFE/QgtCFS1CCClKo2jivZsd6vGY8RiyilbCuy1qC31o",
	"kFrRP6hICGip8kBLpUARH2a6QL9FNfbYa8feZBM224c+JNr1zNw595wzd653A3mMhiyAQETI3UCR1wWK",
	"048eFrDGeG+lB5ivRDGlmPfUAKxjGvoQIXepNIu0kWub4+8BpoBcFAlOgjVkIo/FgUinhJx4gNylY7Zt",
	"7uNv2USCCewj1+4vqygsBC4IVMEqGBtI9EK1OQkErAFH/RquYorG1y8ANi3WiDcQEUDT/drQwbGf5VPi",
	"Q8OsBaB4/Wy2tOWYiJKg9E3Pxpzjnpqrk6zj6JuIw5WYcGgjd6mS8s788mxy6HlUBY4IX4VtlreAw1Yv",
	"gycyXoIO4XSFBB2mYO0gXo+2sQBBMmo7jFMskIvUw4X0qVnnOxJYxFEp0VXGfMCBGuv1ej1KG2TqlxIo",
	"42rAzcFjvL3DsIdhnP2n3uGMNoaaBIICZY0LCmfW12RPmhgsu6hqnkYrFflp4Dr02FspupK1NPONmlxZ",
	"adRlhxAtxy7zihzbOWa37FYOwUVtEulNMm5Qgcd1WnaxNTpAqSjrWYKIHNt+x27Zjko1xEIAD5CLluyF",
	"d5f3JfLhiVnVMQtX0aVgv6aNCpWf8Hw+xdcUBL6AQ4JMdBV4RJjKuXXUVqBYCIEactGxo+pRSks3JdlS",
	"/9ZAZLUy8jgJRba2C9gXXcPrgvfJxwH2r+FeZHAQMQ+MI2eFQSJDdMHgjAkjxGtwBKUbcazWn20jF50B",
	"Vdg4RCELolRTVU2AK3yplWLuq42ECF3L8pmH/S6LhHvCPmGnfijusgqYlE3rqmONDRqyqCEDOfxVDn6T",
	"wz/l8As52GzJ5P6bly9GX/4kkztycLOG9zyLxCXnQk68EgwicZK1e7qACsguHhyGPvHShdblSO2VX8jq",
	"0/85dJCL/meNb2xLX9dWSdl+P3PFmB3k2K0Z7qR3MStB1ql/gBjqsFWoPcUBC8jCH0xRL41glGCOJbU6",
	"ZJ2yQHQna/veSZk8fn3n+d+3nsjkW5k8kMmncnBz9P2z0dZ3b548l8MbqfDfyOFjmWyNbnw22tqWg015",
	"PRm9uP3qh89lspUpvbK4uLh47pxMHk9tjtM5PHWQOKYg8vyJwnYlhvSG1p2VviPNEum1jmH5LZ1Q9DvT",
	"yLmzldlFXhM59vE6+x8y45SG9tYOyLWeYAU939pQ7U9/YrVSo8Zo+/fRswcy2ZKDp3J4Vw5/UR4YbL65",
	"9+j1/WcThD0Dha6LgPkETVXBLEmaTRyXdMFj2KfA9uwFbm4Vp9D7ow/UrOPNUgvjNIuDtznrayCMVKAC",
	"UlXjjeyI7KJuOm4oZas1XWmabMvkQVlieX0gh1/Lwbb6P/xZDu+lNngpk4evfrz31/M/5GDz9dO7amZy",
	"WyaPZHJLJg9l8lW2dleH5Gd5inNfveR38YbZ7LF8qz1dVjQZczHZxCpiIhr7goSYC0u11wttLPAsLps5",
	"uLNcgaJJ9rT0m0zJpnsY5ZReMFVNOaDeE5qUhubCnllzUXmlm49iqu2OGzg/H4tLzkW86sO/TvkehFbf",
	"bia/Vfcbev45irlHv9jwOnL42k84jxw8nf10x/FCNr9mjSpKitd1JTCCmK6Cuumb6nsQ0/9EXZ93PV5k",
	"MTfOvH/RgKAdMqJ7TKW/UMe81AnmrwZNnXpWEubZ0LXqdMyzj9aWTTnSjOW/A+xyPvSUWVW11Zj47cbf",
	"TDhcJTma2mAJacPviHsUw5kabX916Z8AAAD//2i187eWFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
