// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWT4sjRRT/Kk0p7MHKdlcnM870UdFlkEUZ9hLHYah0XpJau7sqVdWZZIeAmzkoehBW",
	"WPGy6G3xMHhQQVDnwzTD7n4LedVJ51+PjjoLTejqqnp/fu/3fi9nJJapkhlk1pDojJh4ACl3r4cwbGiI",
	"pe7iSmmpQFsBbq/LLViRAr7DmKcqARKRMAh2AxaEhBLFrQWdkYgcBY3947cIJXai8JCxWmR9MqWkp2WK",
	"BrY2Ukhl7YbSIoaVHZFZ6IPGrfLL1h3cEdZFV+ZyomGYg7HLgGTnIcS4HjeMlSoR/YFFS6JLItLLhrnK",
	"h7udId/PnblDMNfCEnMLfaknJ6JbH2V1IOMp1KaIyG6iGrJGgM+DIIjc8/G/gnMtmCxPO2Usrxllo2Rm",
	"4IYwSzaKVat1utfhZuLsVUhNgOsTk6cp15ObIr5M8p8Br7IVFtKS3NDjeWJJFNBlGZpBQGsw5OOD8hoL",
	"KUlFtrKaH+Za84nDTlqe1AS5Al590jeDsBmrgRr3RvzRpLNDplO0K7JeWeK5/ZSfYjF1gytBKBmBNkJi",
	"k7K7AYYoFWS4FZHmXfzk+njgQPHxpw+2BMjEWihb3h0AT+zAiwcQf/pJxpNTPjGeBpvrzLtzYD1hPDsA",
	"T0tpPcX7cIc4R5rj/QMM/R5gUgvKoLspJVXJ1xw4uHzLOwn4Z4jS1HGCa56CBW1IdHRGBIaFkRNKyroT",
	"POp8DHOhoUsiq3Ogc7mrK8oxJUqaebpKA5amurYe/kfS2AcYUXvh5JpEYg3cgpfBqddut9v373sukTKn",
	"EfNXZKVyvYr01cWvL59/8eKny+L88+L892J2WcyevLz84+rL74vH3xWzr4rPZqQuusPScJk/GPuO7Lpe",
	"imVmIXOeuFKJiN01/6FBd5UGufq/V757DBcjnuSw1X4sDOjKZHDCFbCAkYU2ka4w80BK8SGk6r+QLfuL",
	"OPIua/Omhh6JyBv+clb580Hlr0ypkvOr6ONE2obxww+Q62HAbh+CFqrEhubgGjEolf06Od9CqES0WQMV",
	"C5ut/4iVWcGKbsDyrmNn17FxyVlkomMs9/SCReOGU5EM5azHEwPrBPax2Va6s1Y13m+XB7zi8YV39dvP",
	"r55+U8x+Kc6fFec/FrMnV18/vfrz2+tZfQ/mpMaeq+m7ReX/Z3mPNurrWLpZ3xfPL1798GxZn6MW3aG7",
	"9G26R/cpCyhjlIWU0ZA2j6sxELLmPgundMsBuyUHrZAF0+N1clQj7u9YUj+EppsDbZtA2Fdr3OmD9dDI",
	"nDnGjdtbk+rqz0eZJOjRwmiuExwb1qrI9xMZ82QgjY32gr2AoLDXjU/BJ2MxaIZhON55RKbTvwIAAP//",
	"HrCzixkLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
