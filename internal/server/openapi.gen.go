// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// create new YYYYMM table
	// (POST /table/{year})
	PostTableYear(w http.ResponseWriter, r *http.Request, year float32)
	// post new a record
	// (POST /v1/record)
	PostRecord(w http.ResponseWriter, r *http.Request)
	// get year records
	// (GET /v1/record/year/{year})
	GetRecordYearYear(w http.ResponseWriter, r *http.Request, year string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostTableYear operation middleware
func (siw *ServerInterfaceWrapper) PostTableYear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "year" -------------
	var year float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "year", runtime.ParamLocationPath, chi.URLParam(r, "year"), &year)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "year", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTableYear(w, r, year)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRecord operation middleware
func (siw *ServerInterfaceWrapper) PostRecord(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRecord(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRecordYearYear operation middleware
func (siw *ServerInterfaceWrapper) GetRecordYearYear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "year" -------------
	var year string

	err = runtime.BindStyledParameterWithLocation("simple", false, "year", runtime.ParamLocationPath, chi.URLParam(r, "year"), &year)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "year", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecordYearYear(w, r, year)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.Get)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/table/{year}", wrapper.PostTableYear)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/record", wrapper.PostRecord)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/record/year/{year}", wrapper.GetRecordYearYear)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWT4sjRRT/Kk0p7MHKdlcnM870UdFlkEUZ9hLHYah0XpJau7sqVdWZZIeAmzkoehBW",
	"WPGy6G3xMHhQQVDnwzTD7n4LedVJ51+PjjoLTejqqnp/fu/3fi9nJJapkhlk1pDojJh4ACl3r4cwbGiI",
	"pe7iSmmpQFsBbq/LLViRAr7DmKcqARKRMAh2AxaEhBLFrQWdkYgcBY3947cIJXai8JCxWmR9MqWkp2WK",
	"BrY2Ukhl7YbSIoaVHZFZ6IPGrfLL1h3cEdZFV+ZyomGYg7HLgGTnIcS4HjeMlSoR/YFFS6JLItLLhrnK",
	"h7udId/PnblDMNfCEnMLfaknJ6JbH2V1IOMp1KaIyG6iGrJGgM+DIIjc8/G/gnMtmCxPO2Usrxllo2Rm",
	"4IYwSzaKVat1utfhZuLsVUhNgOsTk6cp15ObIr5M8p8Br7IVFtKS3NDjeWJJFNBlGZpBQGsw5OOD8hoL",
	"KUlFtrKaH+Za84nDTlqe1AS5Al590jeDsBmrgRr3RvzRpLNDplO0K7JeWeK5/ZSfYjF1gytBKBmBNkJi",
	"k7K7AYYoFWS4FZHmXfzk+njgQPHxpw+2BMjEWihb3h0AT+zAiwcQf/pJxpNTPjGeBpvrzLtzYD1hPDsA",
	"T0tpPcX7cIc4R5rj/QMM/R5gUgvKoLspJVXJ1xw4uHzLOwn4Z4jS1HGCa56CBW1IdHRGBIaFkRNKyroT",
	"POp8DHOhoUsiq3Ogc7mrK8oxJUqaebpKA5amurYe/kfS2AcYUXvh5JpEYg3cgpfBqddut9v373sukTKn",
	"EfNXZKVyvYr01cWvL59/8eKny+L88+L892J2WcyevLz84+rL74vH3xWzr4rPZqQuusPScJk/GPuO7Lpe",
	"imVmIXOeuFKJiN01/6FBd5UGufq/V757DBcjnuSw1X4sDOjKZHDCFbCAkYU2ka4w80BK8SGk6r+QLfuL",
	"OPIua/Omhh6JyBv+clb580Hlr0ypkvOr6ONE2obxww+Q62HAbh+CFqrEhubgGjEolf06Od9CqES0WQMV",
	"C5ut/4iVWcGKbsDyrmNn17FxyVlkomMs9/SCReOGU5EM5azHEwPrBPax2Va6s1Y13m+XB7zi8YV39dvP",
	"r55+U8x+Kc6fFec/FrMnV18/vfrz2+tZfQ/mpMaeq+m7ReX/Z3mPNurrWLpZ3xfPL1798GxZn6MW3aG7",
	"9G26R/cpCyhjlIWU0ZA2j6sxELLmPgundMsBuyUHrZAF0+N1clQj7u9YUj+EppsDbZtA2Fdr3OmD9dDI",
	"nDnGjdtbk+rqz0eZJOjRwmiuExwb1qrI9xMZ82QgjY32gr2AoLDXjU/BJ2MxaIZhON55RKbTvwIAAP//",
	"HrCzixkLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
