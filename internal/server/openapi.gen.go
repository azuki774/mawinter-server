// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// post new a record
	// (POST /record)
	PostRecord(w http.ResponseWriter, r *http.Request)
	// get year records
	// (GET /record/year/{year})
	GetRecordYearYear(w http.ResponseWriter, r *http.Request, year string)
	// create new YYYYMM table
	// (POST /table/{year})
	PostTableYear(w http.ResponseWriter, r *http.Request, year float32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRecord operation middleware
func (siw *ServerInterfaceWrapper) PostRecord(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRecord(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRecordYearYear operation middleware
func (siw *ServerInterfaceWrapper) GetRecordYearYear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "year" -------------
	var year string

	err = runtime.BindStyledParameterWithLocation("simple", false, "year", runtime.ParamLocationPath, chi.URLParam(r, "year"), &year)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "year", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecordYearYear(w, r, year)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostTableYear operation middleware
func (siw *ServerInterfaceWrapper) PostTableYear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "year" -------------
	var year float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "year", runtime.ParamLocationPath, chi.URLParam(r, "year"), &year)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "year", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTableYear(w, r, year)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.Get)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/record", wrapper.PostRecord)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/record/year/{year}", wrapper.GetRecordYearYear)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/table/{year}", wrapper.PostTableYear)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVz28bRRT+V1YDUg+M65m1E5I9gqCKUAWKejEhisbrZ3vK7s54ZjaxG1mizgEEB6Qi",
	"FXGp4FZxiDgAEhKQP2YVtf0v0Jt17LW9gQCpZFs7np3343vf980piVWqVQaZsyQ6JTYeQir84z6MGgZi",
	"ZXq40kZpME6C3+sJB06mgM8wFqlOgEQkZGybcRYSSrRwDkxGInLAGruHbxFK3ETjS9YZmQ3IlJK+USkG",
	"2NhIIVW1G9rIGCo7MnMwAINb5T8bZ3BHOl9d2cuRgVEO1i0LUt2HEON63LBO6UQOhg4jyR6JSD8b5Tof",
	"bXdHYjf34fbBXgtLLBwMlJkcyV59lYsXMpFCbYuI7DqqIW8w/DxgLPKfj/8VnCvFZHnaLWt5zShbrTIL",
	"N4RZ8eNYt9snO11hJz7eAqkJCHNk8zQVZnJTxJdN/jPgi26lg7QkN/RFnjgSMbocQ4sxWoOhGO+Vx3hI",
	"SSqzymr+sjBGTDx2yomkpsgKePVN3wzCVqyHetw/Fo8m3S0ynWJcmfXLEc/jp+IEh2kaQktCyTEYKxWK",
	"lN9lWKLSkOFWRFp38S+v46EHpYk/A3AlQDY2Urvy7BBE4oZBPIT4008ykZyIiQ0MuNxkwZ09F0gbuCEE",
	"RikXaDGAO8QnMgLP72Hp9wCbuqIMpptSshj5SgIPV7OiP2VrSro8//Xl8y9e/HRRnH1enP1ezC6K2ZOX",
	"F39cfvl98fi7YvZV8dlso4qPlHX7ZWAsxrvEO6rnSRerzEHmMwmtExn7Y82HFtMtxOqBeq98DjgujkWS",
	"wwZPechoxUK9whlnnFyJmPSknRdSqpSQBVFDviQi8VMuPRuzvGmgTyLyRnNp6s25ozcrdl6So4o3Wvcm",
	"jB9+gKQIGb99CNoopzVx4hoxKC3wOt/bQKhEtFUDFQ9b7f+Ila1gRddgedeAcNDzVFyyFJkYZHASiMBc",
	"sWjc8HLLUPd9kViosLeJGm+e4u/0Wm293ylfCIrH58Hlbz+/evpNMfulOHtWnP1YzJ5cfv308s9vr6f0",
	"PZgzugPC4JfUj/1/zvZgbbieouvDffH8/NUPz5bDOWjTLbpN36Y7dJdyRjmnPKSchrR1uDDLkLd2eTil",
	"Gwn4LSVoh5xND1eZsbgI/o4i9VY9Xbf9TfagqFaIMwAXYJA5bay/lIQRKTgw1qMr8SBaMaFk3u3kapqj",
	"XBrokciZHKpdrF/Rh0g9J7oJVEh3e3kWt9khrZiyNhB7rcyPbTruA6yohporEMVecV5dnU6nc/9+4BuZ",
	"SxrM8VUDuUnwwnBOR81momKRDJV10Q7bYQQrq7s4pZiM5bAVhuF46xGZTv8KAAD//1ecr7MTCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
